#define WIDTH 80
#define HEIGHT 25

var cursor.x 0
var cursor.y 0

#ifndef STANDALONE
	inc "$kernel/main.casm"
#end

run clearScreen

run setCursor

set ga SET
set gb INPUT

top:
	got gc
	inl ","

	equ gc 8 backspace
	equ gc 9 indent
	equ gc 27 escape
	
	equ gc 19 arrowRight
	equ gc 17 arrowLeft
	equ gc 22 arrowUp
	equ gc 14 arrowDown

	equ gc 13 newline

	run setCursor
	add cursor.x 1

	run k.movf
	add gb 1

	#ifndef X86
		; On linux emulator, ESC quits
		; program, and we don't get the output
		equ gc '0' escape
	#end

	prt gc
jmp top

; Key actions:

arrowRight:
	add cursor.x 1
	run setCursor
jmp top

arrowLeft:
	sub cursor.x 1
	run setCursor
jmp top

arrowUp:
	add cursor.y 1
	run setCursor
jmp top

arrowDown:
	sub cursor.y 1
	run setCursor
jmp top

backspace:
	; Don't backspace in negative
	equ cursor.x 0 top
	
	sub cursor.x 1
	sub gb 1
	run setCursor

	; Delete char (print space, then backspace)
	prt ' '
	prt 8
jmp top

newline:
	inl "!**.+++."
	add cursor.y 1
	set cursor.x 0

	set gc 10
	run k.movf
	add gb 1
jmp top

indent:
	prt "    "
	add cursor.x 4
jmp top

escape:
	set gc 0
	run k.movf
jmp LIB

; Screen functions

setCursor:
	set WKSP 52
	inl "^d"
	got cursor.x
	inl "^d"
	got cursor.y
	inl "^aa"
	prt WKSP
	inl "!^"
ret

clearScreen:
	var x 0
	var y 0
	clearScreen_topY:
		clearScreen_topX:
			set WKSP 52
			inl "^d"
			got x
			inl "^d"
			got y
			inl "^aa"
			prt WKSP
			inl "!^"
			prt ' '

			add x 1
			equ x 80 clearScreen_endX
		jmp clearScreen_topX
		clearScreen_endX:
		add y 1
		set x 0
		equ y 14 clearScreen_endY
	jmp clearScreen_topY
	clearScreen_endY:
	fre x
	fre y
ret

#ifndef STANDALONE
jmp LIB
	inc "$kernel/movf.casm"
LIB:
#end

got 0
inl "!^"
