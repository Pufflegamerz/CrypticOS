; Reserve cells for board. Init with dashes.
inl "!%-----^"
inl "v>v>v>v>v>v>v>v>v>"

var player 'O'

; Include general purpose variables
inc "$kernel/main.casm"

; Point to board end
def BOARDLOC 6

jmp end
	inc "$kernel/mov.casm"
	inc "$kernel/math/sub.casm"

	drawBoard:
		got 0
		inl "<<<<<<<<<"
		inl ".>.>.>"
		inl "^!**.+++.v" ; print newline
		inl ".>.>.>"
		inl "^!**.+++.v" ; print newline
		inl ".>.>.>"
	ret

	plotInput:
		set ga gb
		set gb 50 ; Make sure 48 %-- and not *********+++
		sub gb 2
		run k.sub
		set gb gr

		; Invert 9-0 to 0-9
		set ga 10
		run k.sub
		set gb gr

		add gb BOARDLOC ; move to location

		inl "^!**.+++.v" ; print newline

		; set char in board
		set ga SET
		set gc player
		run k.mov

		; Toggle player from A/B
		equ player 'O' plotInput_b
		set player 'O'
		ret
		plotInput_b:
		set player 'X'
	ret

	
end:

run drawBoard

main_top:
	inl "!**.+++."
	prt "Turn: "

	prt player

	; We must be careful with inline instruction.
	got WKSP
	inl "!**.+++."
	
	prt ':'
	
	; Input in gb
	got gb
	inl ","
	equ gb 'x' asd
	
	run plotInput
	run drawBoard
	inl "#"
jmp main_top
asd:


